declare class a extends HTMLElement {
    static addInitializer(t: any): void;
    static get observedAttributes(): any[];
    static createProperty(t: any, i?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t: any, i: any): any;
            fromAttribute(t: any, i: any): any;
        };
        reflect: boolean;
        hasChanged: (t: any, i: any) => boolean;
    }): void;
    static getPropertyDescriptor(t: any, i: any, s: any): {
        get(): any;
        set(e: any): void;
        configurable: boolean;
        enumerable: boolean;
    };
    static getPropertyOptions(t: any): any;
    static finalize(): boolean;
    static finalizeStyles(i: any): (import("./css-tag.js").CSSResult | CSSStyleSheet)[];
    static _$Ep(t: any, i: any): string;
    _$Ei: Map<any, any>;
    isUpdatePending: boolean;
    hasUpdated: boolean;
    _$El: any;
    u(): void;
    _$E_: Promise<any>;
    enableUpdating(t: any): void;
    _$AL: Map<any, any>;
    addController(t: any): void;
    _$ES: any[];
    removeController(t: any): void;
    _$Eg(): void;
    createRenderRoot(): ShadowRoot;
    connectedCallback(): void;
    renderRoot: ShadowRoot;
    disconnectedCallback(): void;
    attributeChangedCallback(t: any, i: any, s: any): void;
    _$EO(t: any, i: any, s?: {
        attribute: boolean;
        type: StringConstructor;
        converter: {
            toAttribute(t: any, i: any): any;
            fromAttribute(t: any, i: any): any;
        };
        reflect: boolean;
        hasChanged: (t: any, i: any) => boolean;
    }): void;
    _$AK(t: any, i: any): void;
    requestUpdate(t: any, i: any, s: any): void;
    _$EC: Map<any, any>;
    _$Ej(): Promise<boolean>;
    scheduleUpdate(): void;
    performUpdate(): void;
    willUpdate(t: any): void;
    _$AE(t: any): void;
    _$Ek(): void;
    get updateComplete(): Promise<any>;
    getUpdateComplete(): Promise<any>;
    shouldUpdate(t: any): boolean;
    update(t: any): void;
    updated(t: any): void;
    firstUpdated(t: any): void;
}
declare namespace a {
    const h: any[];
    const finalized: boolean;
    const elementProperties: Map<any, any>;
    const _$Ev: Map<any, any>;
    const elementStyles: any[];
    namespace shadowRootOptions {
        const mode: string;
    }
}
declare namespace o {
    function toAttribute(t: any, i: any): any;
    function toAttribute(t: any, i: any): any;
    function fromAttribute(t: any, i: any): any;
    function fromAttribute(t: any, i: any): any;
}
declare function n(t: any, i: any): boolean;
export { a as ReactiveElement, o as defaultConverter, n as notEqual };
export { CSSResult, adoptStyles, css, getCompatibleStyle, supportsAdoptingStyleSheets, unsafeCSS } from "./css-tag.js";
